name: CI for Microservices

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - { name: auth-service, path: ./auth-service/auth-service, db: UserDB }
          - { name: course-service, path: ./course-service/course-service, db: CourseDB }
          - { name: user-service, path: ./User-service/User-service, db: ProfileDB }
          - { name: enrollment-service, path: ./enrollment-service/enrollment-service, db: EnrollmentDB }
          - { name: api-gateway, path: ./api-gateway/api-gateway, db: "" }
          - { name: eureka-server, path: ./eureka-server/eureka-server, db: "" }

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Create DB if needed
        if: ${{ matrix.service.db != '' }}
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE \"${{ matrix.service.db }}\";"

      - name: Build & Test Service
        working-directory: ${{ matrix.service.path }}
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ matrix.service.db }}
        run: mvn clean install test
